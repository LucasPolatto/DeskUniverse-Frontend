@page "/Play"
@inject NavigationManager Navigation
@inject HttpClient Http
@using DeskUniverse_Frontend.Models
@inject UserService UserService
@inject CharacterService CharacterService
@inject CampaignService CampaignService
@inject BoardService BoardService
@inject TokenService TokenService
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime


<!DOCTYPE html>
<html lang="en">

    <head>

        <title>Document</title>
        <link rel="stylesheet" href="css/style.css">

        <style>
            table, tr, td
            {
                border:1px solid white;
            }

            .column 
            {
                float: left;
                width: 15%;
                height: 600px;
            }

            label
            {
                color: white;
            }
        </style>

    </head>
    <body>
        @if (UserService.Logado == true)
        {
            <div class="body">

                <section class="container">
                    <div class="row">
                        
                        <div class="column" style="background-color: rgb(35, 35, 35); overflow: auto;">

                            <br>
                            <button type="button" class="btn btn-primary" @onclick="Voltar">Voltar</button>
                            <br>
                            <label for="gameboardURL">URL do background: </label>
                            <input type="text" class="form-control" @bind="BoardService.BoardData.BackgroundURL" id="gameboardURL" name="gameboardURL">
                            <button type="button" class="btn btn-primary" @onclick="SaveBackground">Salvar</button>
                            <button type="button" class="btn btn-primary" @onclick="LoadBackground">Carregar</button>
                            <br><br>
                            
                            @foreach (var _character in characters)
                                    {
                                        if (_character.CampaignId == BoardService.BoardData.CampaignId)
                                        {
                                            foreach (var _token in tokens)
                                            {
                                                if (_token.CharacterId == _character.Id)
                                                {
                                                    <img id="@_character.Name" src="@_token.ImageURL" draggable="true" ondragstart="drag(event)" width="75" height="75"><br>

                                                    // Pega salva o token do personagem do usuário
                                                    if (_character.Id == UserService.Id)
                                                    {
                                                        TokenService.TokenSave(_token);
                                                    }
                                                }
                                            }
                                        }
                                    }

                        </div>

                        <div class="column" style="width: 70%; overflow: auto;">

                            <table class="table" id="gameBoard" align="center" style="width:1%; background: url(@BoardService.BoardData.BackgroundURL) no-repeat left top; background-size: auto;">
                                <tbody>

                                    @for (y = 25; y > 0; y--)
                                    {
                                        
                                        <tr>
                                            @for (x = 0; x < 25; x++, Position(x,y))
                                            {
                                                <td>
                                                    <div id="@position" style="width: 75px; height: 75px; padding: 1px; border: 0px solid #aaaaaa;" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
                                                </td>
                                            }
                                        </tr>

                                    }
                                    
                                </tbody>

                            </table>

                        </div>

                        <div class="column" style="background-color: rgb(35, 35, 35); overflow: auto;">

                            <label for="tokenURL">URL do Token: </label>
                            <input type="text" class="form-control" onchange="getTokenURL(this.value)" id="tokenURL" name="tokenURL">

                            <button type="button" class="btn btn-primary" onclick="createToken()">Criar Token</button>
                            <br><br>
                            <div id="deleteTokenSlot" style="background-image: url(img/trash-icon.png); background-repeat:no-repeat; background-position: center center; width: 75px; height: 75px; padding: 1px; border: 1px solid #aaaaaa;" ondrop="deleteToken(event)" ondragover="allowDrop(event)"></div>
                            <div id="createTokenSlot" style="width: 75px; height: 75px; padding: 1px; border: 1px solid rgb(35, 35, 35);" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
                        </div>
                        
                    </div>
                </section>

            </div>
        }
        else{Navigation.NavigateTo("/Login");}
    </body>
</html>

@code
{
    // Salva todos os dados das tabelas do banco em listas ----------------------------------------------------------------------------
    public List<Campaign>? campaigns { get; set; } = new List<Campaign>();
    public List<Character>? characters { get; set; } = new List<Character>();
    public List<Image>? images { get; set; } = new List<Image>();
    public List<Token>? tokens { get; set; } = new List<Token>();

    protected override async Task OnInitializedAsync()
    {
        campaigns = await Http.GetFromJsonAsync<List<Campaign>?>("campaign");
        characters = await Http.GetFromJsonAsync<List<Character>?>("character");
        images = await Http.GetFromJsonAsync<List<Image>?>("image");
        tokens = await Http.GetFromJsonAsync<List<Token>?>("token");
    }

    // Variáveis e função de geração de localização x,y de Tokens ---------------------------------------------------------------------
    public int x;
    public int y;
    public string position;

    public string Position(int x, int y)
    {
        x = x + 1;

        string sx = Convert.ToString(x);
        string sy = Convert.ToString(y);

        return (position = $"{sx},{sy}");
    }

    // Volta para a página Home -------------------------------------------------------------------------------------------------------
    public void Voltar()
    {
        BoardService.Playing = false;
        Navigation.NavigateTo("/");
    }

    // Carrega o background -----------------------------------------------------------------------------------------------------------
    public async void LoadBackground()
    {
        await JSRuntime.InvokeVoidAsync("changeBackground", BoardService.BoardData.BackgroundURL);
    }

    // Salva o background do jogo -------------------------------------------------------------------------------------------------------------------
    public void SaveBackground()
    {
        Http.PutAsJsonAsync<Board>($"board/{BoardService.BoardData.Id}", BoardService.BoardData);
        JSRuntime.InvokeVoidAsync("alertSaveBackground");
    }
}